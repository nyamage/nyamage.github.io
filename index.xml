<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nyamage.io</title>
    <link>https://nyamage.github.io/</link>
    <description>Recent content on nyamage.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 28 Aug 2017 22:41:03 +0900</lastBuildDate>
    
	<atom:link href="https://nyamage.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Snippets_20170828</title>
      <link>https://nyamage.github.io/post/2017/08/28/snippets_20170828/</link>
      <pubDate>Mon, 28 Aug 2017 22:41:03 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/08/28/snippets_20170828/</guid>
      <description> 今週やった事  Practical Guide to SQL Transaction Isolation読んだ node+expressでexpressのチュートリアルみながらサンプルコード書いてる expressのチュートリアルついでにgoogle chart少し使ってみた ニューラルネットワーク自作入門読んでる  来週までにやること  Nodeアプリの題材いいかげん決めたい [2] Snapshot Isolationについてちゃんと調べる [1]  いつかやること  Aboutちゃんと書く [6] ECMAScript6を使って適当なアプリを作る [2] A Critique of ANSI SQL Isolation Levelsを読んでまとめる node x expressでrest api簡単に作る方法探す[2] API Gatewayについて調べる  自分プロジェクト  キッチリとSQLを理解する 最近のJS事情に追いつく 最近のDocker事情に追いつく 機械学習・DeepLearning入門する 勉強の持続可能な方法の調査・改善 その他  </description>
    </item>
    
    <item>
      <title>Snippets_20170820</title>
      <link>https://nyamage.github.io/post/2017/08/20/snippets_20170820/</link>
      <pubDate>Sun, 20 Aug 2017 23:14:26 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/08/20/snippets_20170820/</guid>
      <description> 今週やった事  SQLのインデックスとそのチューニングについてのオンラインブック読んだ [1] scikit-learnのチュートリアルはじめた  来週までにやること  node x expressでrest api簡単に作る方法探す[2]  いつかやること  Aboutちゃんと書く [6] ECMAScript6を使って適当なアプリを作る [2] A Critique of ANSI SQL Isolation Levelsを読んでまとめる Practical Guide to SQL Transaction Isolationを読む  自分プロジェクト  キッチリとSQLを理解する 最近のJS事情に追いつく 最近のDocker事情に追いつく 機械学習・DeepLearning入門する 勉強の持続可能な方法の調査・改善 その他  </description>
    </item>
    
    <item>
      <title>Snippets_20170723</title>
      <link>https://nyamage.github.io/post/2017/07/23/snippets_20170723/</link>
      <pubDate>Sun, 23 Jul 2017 23:51:52 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/23/snippets_20170723/</guid>
      <description>今週やった事  トランザクション分離レベル(SQL-92)について勉強しまとめた [1] Hugoで新しい記事書いたら自動的にツイートする方法(mythings)調べ、mythingsを使って連携させてみた [5]  来週までにやること  ECMAScript6を使って適当なアプリを作る [2] A Critique of ANSI SQL Isolation Levelsを読んでまとめる  いつかやること  Aboutちゃんと書く [6]  自分プロジェクト  キッチリとSQLを理解する 最近のJS事情に追いつく 最近のDocker事情に追いつく 機械学習・DeepLearning入門する 勉強の持続可能な方法の調査・改善 その他  雑記 週報書くと自分が何勉強してたか(したかったか)簡単に思い出せて便利</description>
    </item>
    
    <item>
      <title>Sql_92_isolation_level</title>
      <link>https://nyamage.github.io/post/2017/07/23/sql_92_isolation_level/</link>
      <pubDate>Sun, 23 Jul 2017 23:42:33 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/23/sql_92_isolation_level/</guid>
      <description>トランザクション分離レベル SQL 92版 トランザクション分離レベルとは?  複数のトランザクションで同じデータにアクセスした際のトランザクション間の影響度合い 分離レベル毎に発生する不整合の種類が異なる 発生する不整合に応じてトランザクション分離レベルが定義される 分離レベルが高いほど発生する不整合の種類が減りるが、スケーラビリティが落ちる 基本的な不整合の種類についてはANSI SQL 92にて定義されている  トランザクション分離レベルを定義する問題 トランザクション分離レベルはレベル毎に発生する不整合の種類が異なる。 以下で発生する不整合について簡単に記載する。
Dirty Read あるトランザクション(T1)がcommit or rollbackする前のデータを別のトランザクション(T2)が読んでしまう問題
Non-repeatable or Fuzzy Read あるトランザクション(T1)がデータXを読み込んだ後、別のトランザクション(T2)がデータXを書き換えcommitし、 T1のトランザクションが変更された後のデータXを読み込んでしまう問題
Phantom あるトランザクション(T1)が特定条件を満たすデータの集合(S1)を読み込んだ後に、 別のトランザクション(T2)がS1を満たすデータを作成しcommitする。 T1のトランザクションが再度S1のデータ集合を読み込むと、最初の読み込みとは異なるデータ集合を得てしまうこと
トランザクション分離レベル  トランザクションの並列実行時に発生する可能性がある問題に応じてトランザクション分離レベルが定義される     レベル Dirty Read Non-repeatable or Fuzzy Read Phantom     READ UNCOMMITTED x x x   READ COMMITTED o x x   REPEATABLE READ o o x   SERIALIZABLE o o o    o: 発生しない x: 発生する</description>
    </item>
    
    <item>
      <title>Snippets_20170717</title>
      <link>https://nyamage.github.io/post/2017/07/17/snippets_20170717/</link>
      <pubDate>Mon, 17 Jul 2017 21:17:07 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/17/snippets_20170717/</guid>
      <description>今週やった事  トランザクション分離レベルについて勉強 [1] ECMAScript6をさらっと勉強 [2]  来週までにやること  トランザクション分離レベルについてまとめる [1] ECMAScript6を使って適当なアプリを作る [2] Hugoで新しい記事書いたら自動的にツイートする方法調べる [5]  いつかやること  Aboutちゃんと書く [6]  自分プロジェクト  キッチリとSQLを理解する 最近のJS事情に追いつく 最近のDocker事情に追いつく 機械学習・DeepLearning入門する 勉強の持続可能な方法の調査・改善 その他  雑記 Rebuildで聞いてずっと気になってた週報活動を開始
一緒にやる人いないので、とりあえずBlogで始めてみる。</description>
    </item>
    
    <item>
      <title>Add_tag</title>
      <link>https://nyamage.github.io/post/2017/07/06/add_tag/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:04 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/06/add_tag/</guid>
      <description>ここらへんを参考にtag機能を追加.
http://gohugo.io/taxonomies/overview/ http://qiita.com/spiegel-im-spiegel/items/4c5859f7cac877068742</description>
    </item>
    
    <item>
      <title>Blog_start</title>
      <link>https://nyamage.github.io/post/2017/07/04/blog_start/</link>
      <pubDate>Tue, 04 Jul 2017 23:32:48 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/04/blog_start/</guid>
      <description> 概要 github pages触ってみたかったので、hugoを使って作ってみた。
今後使うコマンド コンテンツ作成 $hugo new post/&amp;lt;new_content&amp;gt;.md  サイト生成 $hugo  ローカルで確認 $hugo server --buildDrafts  その他  Hugo - Configuration Hugo - Source Organization  参考にしたサイト  Hugo - Quick Start Github Pages hugo-xmin  </description>
    </item>
    
    <item>
      <title>Good To Great</title>
      <link>https://nyamage.github.io/post/2017/07/04/good-to-great/</link>
      <pubDate>Tue, 04 Jul 2017 22:48:26 +0900</pubDate>
      
      <guid>https://nyamage.github.io/post/2017/07/04/good-to-great/</guid>
      <description>I read Good to Great in January 2016. An awesome read sharing detailed analysis on how good companies became great.</description>
    </item>
    
  </channel>
</rss>